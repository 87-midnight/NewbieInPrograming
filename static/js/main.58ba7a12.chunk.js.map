{"version":3,"sources":["Content.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["marked","setOptions","renderer","Renderer","gfm","pedantic","sanitize","tables","breaks","smartLists","smartypants","highlight","code","hljs","highlightAuto","value","Contents","state","html","path","axios","get","then","s","res","data","console","log","setState","this","props","location","parseHtml","query","id","dangerouslySetInnerHTML","__html","Component","Header","Layout","Content","Footer","Sider","SubMenu","Menu","SiderHome","collapsed","pathname","onCollapse","onClick","event","style","minHeight","collapsible","className","theme","defaultSelectedKeys","mode","Item","key","e","type","to","title","background","padding","margin","component","textAlign","React","App","Home","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58ba7a12.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport marked from 'marked'\r\nimport hljs from \"highlight.js\";\r\nimport 'highlight.js/styles/monokai-sublime.css';\r\nimport axios from \"axios\";\r\nmarked.setOptions({\r\n\r\n    renderer: new marked.Renderer(),\r\n    gfm: true,\r\n    pedantic: false,\r\n    sanitize: false,\r\n    tables: true,\r\n    breaks: true,\r\n    smartLists: true,\r\n    smartypants: true,\r\n    highlight: function (code) {\r\n        return hljs.highlightAuto(code).value;\r\n    }\r\n\r\n});\r\n\r\nclass Contents extends Component {\r\n\r\n    state = {\r\n      html:\"<div>default</div>\"\r\n    };\r\n    parseHtml(path){\r\n        axios.get(path).then(s=>{\r\n            let res = marked(s.data);\r\n            console.log(res);\r\n            this.setState({html:res});\r\n        });\r\n    }\r\n    query(){\r\n        let state = this.props.location.state;\r\n        console.log(state);\r\n        return state.path;\r\n    }\r\n    render() {\r\n        this.parseHtml(this.query());\r\n        return (\r\n            <div id=\"content\" dangerouslySetInnerHTML = {{__html:this.state.html }}></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contents;","\r\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\r\nimport Contents from \"./Content\";\r\nimport React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Route,\r\n    Link\r\n}from 'react-router-dom';\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\nclass SiderHome extends React.Component {\r\n    state = {\r\n        collapsed: false,\r\n    };\r\n    query = {\r\n        pathname:\"/content\",\r\n        state:{path:\"/NewbieInJava/基础篇/README.md\"},\r\n\r\n    };\r\n    onCollapse = collapsed => {\r\n        console.log(collapsed);\r\n        this.setState({ collapsed });\r\n    };\r\n    onClick = event => {\r\n        console.log(event);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n            <Layout style={{ minHeight: '100vh' }}>\r\n                <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse}>\r\n                    <div className=\"logo\" />\r\n                    <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n                        <Menu.Item key=\"1\" onClick = {(e)=>this.onClick(e)}>\r\n                            <Icon type=\"pie-chart\" />\r\n                            <span><Link to={this.query}>Option 1</Link></span>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"2\">\r\n                            <Icon type=\"desktop\" />\r\n                            <span>Option 2</span>\r\n                        </Menu.Item>\r\n                        <SubMenu\r\n                            key=\"sub1\"\r\n                            title={\r\n                                <span>\r\n                  <Icon type=\"user\" />\r\n                  <span>User</span>\r\n                </span>\r\n                            }\r\n                        >\r\n                            <Menu.Item key=\"3\">Tom</Menu.Item>\r\n                            <Menu.Item key=\"4\">Bill</Menu.Item>\r\n                            <Menu.Item key=\"5\">Alex</Menu.Item>\r\n                        </SubMenu>\r\n                        <SubMenu\r\n                            key=\"sub2\"\r\n                            title={\r\n                                <span>\r\n                  <Icon type=\"team\" />\r\n                  <span>Team</span>\r\n                </span>\r\n                            }\r\n                        >\r\n                            <Menu.Item key=\"6\">Team 1</Menu.Item>\r\n                            <Menu.Item key=\"8\">Team 2</Menu.Item>\r\n                        </SubMenu>\r\n                        <Menu.Item key=\"9\">\r\n                            <Icon type=\"file\" />\r\n                            <span>File</span>\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                </Sider>\r\n                <Layout>\r\n                    <Header style={{ background: '#fff', padding: 0 }} />\r\n                    <Content style={{ margin: '0 16px' }}>\r\n                        <Breadcrumb style={{ margin: '16px 0' }}>\r\n                            <Breadcrumb.Item>User</Breadcrumb.Item>\r\n                            <Breadcrumb.Item>Bill</Breadcrumb.Item>\r\n                        </Breadcrumb>\r\n                        <div style={{ padding: 24, background: '#fff', minHeight: 360 }}><Route path=\"/content\" component={Contents}></Route></div>\r\n                    </Content>\r\n                    <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\r\n                </Layout>\r\n            </Layout>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\nexport default SiderHome;","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home'\n\nclass App extends Component {\n    render() {\n        return (\n           <Home/>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}